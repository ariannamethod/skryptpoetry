"""
SkryptBridge - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (MiniLE + Skryptpoetry)
–û—Ç–¥–µ–ª–µ–Ω–æ –æ—Ç Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏.
"""
import os
import sys
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'skryptpoetry'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'skryptpoetry', 'arianna_linux'))

# –ò–º–ø–æ—Ä—Ç—ã MiniLE
from arianna_core import mini_le

# –ò–º–ø–æ—Ä—Ç—ã Skryptpoetry
try:
    from symphony import Symphony
    from letsgo import run_script
    SKRYPTPOETRY_AVAILABLE = True
except ImportError as e:
    logging.warning(f"Skryptpoetry not available: {e}")
    SKRYPTPOETRY_AVAILABLE = False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è Symphony –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
_symphony = None

def _get_symphony():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Symphony."""
    global _symphony
    if _symphony is None and SKRYPTPOETRY_AVAILABLE:
        try:
            scripts_path = os.path.join(os.path.dirname(__file__), 'skryptpoetry', 'tongue', 'prelanguage.md')
            dataset_path = os.path.join(os.path.dirname(__file__), 'skryptpoetry', 'datasets', 'dataset01.md')
            _symphony = Symphony(dataset_path=dataset_path, scripts_path=scripts_path)
            logging.info("‚úÖ Symphony initialized")
        except Exception as e:
            logging.error(f"‚ùå Symphony initialization failed: {e}")
    return _symphony

async def process_message(message: str) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç MiniLE + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Skryptpoetry.
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç MiniLE
        if hasattr(asyncio, "to_thread"):
            minile_reply = await asyncio.to_thread(mini_le.chat_response, message)
        else:  # Python 3.8 fallback
            loop = asyncio.get_running_loop()
            minile_reply = await loop.run_in_executor(None, mini_le.chat_response, message)
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º Skryptpoetry –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        symphony = _get_symphony()
        if SKRYPTPOETRY_AVAILABLE and symphony:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ MiniLE
                if hasattr(asyncio, "to_thread"):
                    script_code = await asyncio.to_thread(symphony.respond, minile_reply)
                    script_result = await asyncio.to_thread(run_script, script_code)
                else:
                    loop = asyncio.get_running_loop()
                    script_code = await loop.run_in_executor(None, symphony.respond, minile_reply)
                    script_result = await loop.run_in_executor(None, run_script, script_code)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
                return f"{minile_reply}\n\n{script_result}"
            except Exception as e:
                logging.debug(f"Skryptpoetry visualization failed: {e}")
                return minile_reply
        else:
            return minile_reply
            
    except Exception as e:
        logging.error(f"Message processing failed: {e}")
        return "Error: failed to generate response."

def process_message_sync(message: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–µ-async –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."""
    try:
        # MiniLE –æ—Ç–≤–µ—Ç
        minile_reply = mini_le.chat_response(message)
        
        # Skryptpoetry –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        symphony = _get_symphony()
        if SKRYPTPOETRY_AVAILABLE and symphony:
            try:
                script_code = symphony.respond(minile_reply)
                script_result = run_script(script_code)
                return f"{minile_reply}\n\n{script_result}"
            except Exception:
                return minile_reply
        else:
            return minile_reply
            
    except Exception as e:
        logging.error(f"Sync message processing failed: {e}")
        return "Error: failed to generate response."

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    import time
    
    print("=== –¢–ï–°–¢ SKRYPTBRIDGE ===")
    
    start = time.time()
    response = process_message_sync("hello test")
    print(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time.time() - start:.3f}s")
    print(f"üìù –û—Ç–≤–µ—Ç: {response}")
